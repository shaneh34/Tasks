install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
install.packages("swirl")
library(swirl)
swirl()
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
3
my_sqrt
my_div<-z/my_sqrt
3
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1
1
1
1
1
1
1
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
ShaneHarless
library(swirl)
swirl()
1
1
1
1
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
3
my_sqrt
my_div<-z/my_sqrt
3
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1
library(swirl)
swirl()
1
1
1
1
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
3
my_sqrt
my_div<-z/my_sqrt
3
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1
library(swirl)
swirl()
1
1
1
1
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
3
my_sqrt
my_div<-z/my_sqrt
3
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1
library(swirl)
swirl()
1
1
1
1
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
3
my_sqrt
my_div<-z/my_sqrt
3
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1
library(swirl)
swirl()
1
1
1
1
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
3
my_sqrt
my_div<-z/my_sqrt
3
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1
1
exit
q()
q
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
x<-c(44,NA,5,NA)
X*3
X<-C(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
1
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir<-getdwd()
old.dir<-getwd()
testdir<-dir.create()
dir.create(testdir)
c
dir.create("testdir")
setwd(testdir)
b
setwd("testdir")
file.create("mytest.R")
b
n
jjh
getwd()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R")
file.rename("mytest.R to mytest2.R")
file.rename("mytest2.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R" "mytest2.R")
file.rename("mytest.R" "mytest2.R")
file.rename("mytest.R" "mytest2.R")
file.rename(from "mytest.R" to "mytest2.R")
file.rename(from "mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","my.test3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1','foler2')
file.path("folder1", "folder2")
?dir.create
dir.create(file/path("testdir2", "testdir3"), recursive=TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
x<-c(44, NA, 5, NA)
y <- rnorm(1000)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow =4, ncol=5, byrow = FALSE)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
which(ints>7)
ints>5
which(ints>7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram(c("Shane", "Harless", "is", "terrible", "at", "programming"))
submit()
args <- list(...)
mad_libs(place= "Sandstone", adjective= "blue", noun="sky")
submit()
submit()
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head("cars")
head(cars)
plot(cars)
?plot()
?plot
plot(x = cars$speed, y =cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
setwd("~/Desktop/Evolution/Tasks/Task_02")
beren3 <- read.csv("beren_new.csv", stringsAsFactors=F)
Naps <- which(beren3$event == "nap")
beren4 <- beren3[Naps,]
head(beren4)
#naming stuff
beren4$end_minute <- beren4$end_minute / 60
beren4$start_minute <- beren4$start_minute / 60
beren4$napstart <- beren4$start_hour + beren4$start_minute
beren4$napend <- beren4$end_hour + beren4$end_minute
beren4$naplength <- beren4$napend - beren4$napstart
naptime <- tapply(beren4$naplength, beren4$age, sum, na.rm=T)
#graphing
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5 ,0), tck=-.01)
plot(as.numeric(names(naptime)), naptime, type="b", pch=16, xlab="day", ylab="naptime")
cor.test(beren4$age, naplength)
x <- read.table("http://esapubs.org/Archive/ecol/E090/184/PanTHERIA_1-0_WR05_Aug2008.txt", sep = "\t", stringsAsFactors=F)
PopDen <- log(as.numeric(x[,26]))
Size <- log(as.numeric(x[,7]))
par(las=1, mar=c(4,5,1,1), mgp=c(2, 0.25, 0), tck=-0.001)
plot(Size, PopDen, pch=16, col='gray70', xlab="log adult mass (g)", ylab="log pop. density (n / km^2)")
Group <- which(x[,1] == "Cetacea")
COL <- '#fc8d62'
points(Size[Group], PopDen[Group], pch=21, bg=COL, cex=1.1)
Mod <- lm(PopDen[Group] ~ Size[Group])
abline(Mod, untf = TRUE, col = COL, lwd=2, lty=2)
Group <- which(x[,1] == "Soricomorpha")
COL <- '#8da0cb'
points(Size[Group], PopDen[Group], pch=21, bg=COL, cex=1.1)
Mod <- lm(PopDen[Group] ~ Size[Group])
abline(Mod, untf = TRUE, col = COL, lwd=2, lty=2L)
Group <- which(x[,1] =="Erinaceomorpha")
COL <- '#66c2a5'
points(Size[Group], PopDen[Group], pch=21, bg=COL, cex=1.1)
Mod <- lm(PopDen[Group] ~ Size[Group])
abline(Mod, untf = TRUE, col = COL, lwd=2, lty=2)
Input <- "C:\\Users\\harle\\Evolution\\Tasks\\Project\\Data"
setwd(Input)
Graphdata <-read.csv(file.choose(), header=TRUE)
Graphdata
PercentWolfDNA <- Graphdata$WOLF.DNA
Heterozygosity <- Graphdata$RELATIVE.FST
plot (PercentWolfDNA, Heterozygosity, xlab="Amount of Wolf DNA (%)", ylab="Coyote Heterozygosity", main= "X-Y Scatter Plot")
abline(lm(Heterozygosity~PercentWolfDNA), col="red")
Regression <- lm(Heterozygosity~PercentWolfDNA)
Regression
Correlationtest <- cor.test(PercentWolfDNA, Heterozygosity,
method = "pearson")
Correlationtest
install.packages("ggpubr")
library("ggpubr")
ggscatter(Graphdata, x = "WOLF.DNA", y = "RELATIVE.FST",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Amount of Wolf DNA (%)", ylab = "Relative Heterozygosity", main= "Pearson Correlation Test")
MultipleRegression <-read.csv(file.choose(), header=TRUE)
MultipleRegression
PercentWolfDNA <- MultipleRegression$WOLF.DNA
Heterozygosity <- MultipleRegression$RELATIVE.FST
Location <- MultipleRegression$State.Province
cor(PercentWolfDNA, Location, method= "pearson")
MultipleRegression$State.Province <- as.numeric(MultipleRegression$State.Province)
Location <- MultipleRegression$State.Province
cor(PercentWolfDNA, Location, method= "pearson")
MRegression <- lm(Heterozygosity~PercentWolfDNA+Location)
MRegression
MultipleRegression$State.Province <- as.factor(MultipleRegression$State.Province)
MRegression <- lm(Heterozygosity~PercentWolfDNA+Location)
MRegression
cor(PercentWolfDNA, Location, method= "pearson")
plot(MRegression)
summary(MRegression)
MultipleRegression$State.Province <- as.factor(MultipleRegression$State.Province)
Location <- MultipleRegression$State.Province
MRegression <- lm(Heterozygosity~PercentWolfDNA+Location)
summary(MRegression)
cor(PercentWolfDNA, Location, method= "pearson")
plot(MRegression)
